create folder codeial
create index.js
Run npm init(package.json file created)
Run mkdir views controller models config routes 
Run npm install express
write code in index.js for(importing express ,app ,port ,listen)
make shortcut of nodemon index.js as npm start by incluiding ("start": "nodemon index.js",) inside script of package.json
Run git init
create file .gitignore and write node_modules/  , /notes_backend.txt
run git add .
create index.js in routes and write inside it as (express,router,exports) and connect it with main index.js as app.use('/',require('./routes'))
create home_controller.js in controller and write inside it as (module.exports.xyz=function(req,res){  })  and connect it with index.js of routes as const homeController = require('../controller/home_controller) , router.use('/',homeController.xyz)
Run git add . and commit -dm" add a controller and a router for home"
create users.js in routes and write inside it as (express,router,exports )  create users_controller.js in controller and write inside it as (module.exports.profile=fun..) and and connect it with users.js in routes as(const userController= require('../controller/users_controller') , router.get('/profile',userController.profile))  and connect users.js with index.js of routes as ( router.use('/users',require('./users')) )
Run npm install ejs and update main index.js as (  app.set('view engine', 'ejs'), app.set('views','./views') )
Create home.ejs in views and connect it with home_controller as (  return res.render('home',{       title: "Home" }))


Authentication
Create Users.js in models and and write inside it as (  userSchema,module.exports=User)

Create user_sign_in.ejs and user_sign_up.ejs in views and connect it with users_controller of controller as (module.exports.SignUp =funct.....,module.exports.SignUp) And connect controller with user.js of routes as ( router.get('/sign-up',require(users_controller.SignUp)) , router.get('/sign-in',require(users_controller.SignIn))   )
Create Sign Up and sign In form in user_sign_up.ejs and user_sign_in.ejs and connect it with users_controller.js of controller as ( module.exports.create = function(req,res){ )and use it in routes as ( )

Run npm install cookie-parser and import it in index.js as(const cookieParser = require('cookie-parser).........) and edit in home_controller

import user of models in users_controller.js as ( const User = requir('../models/user'))
and Condition for SignUp- find email to check, in modeule.exports.create=function(req,res){ ....... User.findOne}
After sign up , go to sign in page and if password and email correct go to profile page

Passportjs
(middleware is something which get executed before your request data reaches controller action )
Run npm install passport,Run npm install passport-local
Create passport-local-storage in config and write inside it as (  )
Serialize and deserialize user
Run npm install express-session and write in main index.js as ( const session = require('express-session') ,app.use(session({
,app.use(passport.initialize()),app.use(passport.session()) )
and go userController of controller and write in createsession as ( return res.redirect('/') )
and go to routes to import passport, and write inside it as (  router.post('/createSession',passport.authenticate('lical',{failureRedirect:'/users/sign-in'},userController.createSession)
//(we set up our passport authentication)the user is now getting an identity establish on the server and that identity is saved into the session cookie using express-session and communication establish bw browser and server
write code in passport-local-startegy as ( passport.checkAuthentication = function(req,res,next){......)
and go to routes and write  in profile as  (passport.checkAuthentication )
//we are now able to check the authentication and if the user is able to view the profile page or not --
//sign up and sign in pages available only when the user is log out
Write code in signIn and SignUp of users_controller as (  if(req.isAuthenticated()){ return res.redirect('/users/profile')})
//Problem 2 : session cookie gets reset everytime when server gets restart
Run npm install connect-mongo and import it in  index.js as ( ) and write code in index.js

Run npm install node-sass-middleware and import it in index.js and use it as ( app.use)

Create posts.js in models and write code as ( mongoose, postSchema......)
Create post form in home pade , and create posts_controller in controller as (import Post from posts, module.exports.create= function..)
Create posts.js in routes and connect it with post_controller as (router.post('/create',postController.create) ) and connect post router with index router as (router.use('/posts',postController.create))
//Lookat towards populating user of each post in post_controller as (Post.find({}),populate(user).exec(CALLBACK FUNCTION)) and write code in home.ejs as ( post.user.name)
write code in home.ejs to avoid log out person to post, as (<%  if(locals.user) {  %>  ) outside form tag and for avoiding posting for logout person by (fiddle)playing with html in inspect , write code in post.js of routes as (importing passport , passport.checkAuthentication)
Create comment.js in models and write inside it as ( ) and include comments Schema in post.js , create comment form in home.ejs and create comments_controller in controller and write inside it as ( ) and connect it with router
//to display comments of each post in home , When we need to populate multiple models i.e, comments and its user , write code inside in home_controller as ( Post.find({}).populate('user').populate({path: 'comments',populate: {path: 'user'})  and code in home.ejs as (<% for (comment of post.comments){   ....comment.content ... comment.user.name)
In post_controller ,write code to destroy post as (module.exports.destroy= function(req,res){Post.findById({req.params.id},function(err,post){....... post.remove(), Comment.deleteMany})} )  and connect it with posts router
In comments_controller ,write code to destroy comment as (module.exports.destroy= function(req,res){Comment.findById(req.params.id,function(err,comment){.... let postId = comment.post;,comment.remove(),Post.findByIdAndUpdate(postId,{ $pull: {comments: req.params.id}} ,func....  )  and connect it with routes of comments  and create a delete button in ejs 
Now Distributing the code into partials , Create _post.ejs in views and paste complete li tag from home.ejs containing posts in _post 
import users in home_controller to display all users as ( ...exec(function(err,posts){ User.find({},function(err,users){   res.render('home',{title, , all_users: users}})    })) and write code in home.ejs 
Update routes in user.js as ( router.get('/profile/:id....)) and in userController.profile as (User.findById(.. return res.render('user_profile',{..  ... profile_user: user))  and edit user_profile.ejs as (profile_user.name)
//Updating a user's profile, Made a update form in user_profile.ejs which is visible to user only when he is login with his that profile which need to update name and email 
Create update module in users_controller.js and connect it with routes
Use scss in home  page
Rewrite code using Async /Await
Establishing Flash Messages, Run npm install connect-flash
Update index.js as ( const flash , app.use(flash()) ) flash msgs will setup in session cookie
update createSession and destroySession in users_controller as (req.flash('Success','Logged in Successfully)) and create middleware.js (to take this flash req msgs and put them into res, we created a middleware) in config & import it in index.js , Access it in layout.ejs
Include min.css min.js cdn link for noty flash msgs in layouts and wrote code inside script tag 
Include cdnjs of jquery in layout.ejs & create home_post.js in js and and paste its link in home.ejs and create ajax request in home_post.js to upload post without reloaing of page
deleting a post using ajax, for deleting we need two things ,one to be able to send the data to the controller to delete it and once we get a confirmation we remove that post from the dom the place where it is displayed right now  and establish ajax request for creating and deleting comment 
Files Upload
Run npm multer , updated upload form of user_profile.ejs updated User.js of models and users_controller.js for upload and saving file into a folder uploads/users/avatars 

API & JWT Authentication
install postman , Create folder api in controller and routes , and in each api create v1 folder and then create index.js posts.js (in router) and create post_api.js in v1 in controller 
Run npm install passport-jwt, create passport-jwt-stratrgy.js in config
Run npm install jsonwebtoken, create users_api.js in v1 api of controller
Create users.js in v1 api of routes , put authentication on deletion of post including passport.authenticate('jwt' ,{session: false}) in post.js of v1 api of routes

create google oath consent screen in console.developers.google.com
create passport-google-outh2-stratrgy.js in config
Run npm install passport-google-oauth, Run npm install crypto

Mailer
Run npm install nodemailer
Create nodemailer.js in config and create mailer in views
Create mailer folder inside it create comments_mailer.js
create new_comments.js in comments in mailer in views

Delayed Jobs
Run npm install kue
mark window on linux option , download ubuntu , update and upgrade it using sudo apt-get update and sudo apt-get upgrade, install redis using sudo apt-get install redis-server, redis-cli-v
Create kue.js in config and create comment_email_workers.js in workers

Likes 
Create like.js in models and creating controller likes_controller.js and routes like.js and for render create ejs with ajax request

Chat engine
Run Nom install socket.io 
Create chat_sockets in config and import require library in index.js also
Create chat_engine in js of asserts and import it in home ejs

Create environment.js in config  and create environment variable in pc 
Run npm install morgan
Run npm install rotating-file-stream


Run npm install gulp-cli -g to set up gulp for development purpose
and Run npm install gulp -D, npm install gulp-sass, npm install gulp-cssnamo, npm install gulp-rev
Setup a folder named public inside it create asserts ,inside it folders as css, js and images
Run npm install gulp-uglify-es , npm install gulp-imagemin
